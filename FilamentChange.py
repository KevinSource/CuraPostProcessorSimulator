# Copyright (c) 2019 Ultimaker B.V.
# The PostProcessingPlugin is released under the terms of the AGPLv3 or higher.

from typing import List
if __name__ == '__main__':
    import getSettingDataSimulator
    import os
    from findfqpath import find_fq_path
else:
    from ..Script import Script # When called from Cura

# *****************************************************************************************************
# This if statement sets the class to Script in Cura, but to the test class ScriptSim in test
# *****************************************************************************************************
if __name__ == '__main__':
    ClassNm = getSettingDataSimulator.ScriptSim
else:
    ClassNm = Script

class FilamentChange(ClassNm):

    _layer_keyword = ";LAYER:"

    def __init__(self):
        super().__init__()

    def getSettingDataString(self):
        return """{
            "name":"Filament Change",
            "key": "FilamentChange",
            "metadata": {},
            "version": 2,
            "settings":
            {
                "layer_number":
                {
                    "label": "Layer",
                    "description": "At what layer should color change occur. This will be before the layer starts printing. Specify multiple color changes with a comma.",
                    "unit": "",
                    "type": "str",
                    "default_value": "1"
                },

                "initial_retract":
                {
                    "label": "Initial Retraction",
                    "description": "Initial filament retraction distance. The filament will be retracted with this amount before moving the nozzle away from the ongoing print.",
                    "unit": "mm",
                    "type": "float",
                    "default_value": 30.0
                },
                "later_retract":
                {
                    "label": "Later Retraction Distance",
                    "description": "Later filament retraction distance for removal. The filament will be retracted all the way out of the printer so that you can change the filament.",
                    "unit": "mm",
                    "type": "float",
                    "default_value": 300.0
                },
                "x_position":
                {
                    "label": "X Position",
                    "description": "Extruder X position. The print head will move here for filament change.",
                    "unit": "mm",
                    "type": "float",
                    "default_value": 0
                },
                "y_position":
                {
                    "label": "Y Position",
                    "description": "Extruder Y position. The print head will move here for filament change.",
                    "unit": "mm",
                    "type": "float",
                    "default_value": 0
                }
            }
        }"""

    def execute(self, data: List[str]):
        """Inserts the filament change g-code at specific layer numbers.

        :param data: A list of layers of g-code.
        :return: A similar list, with filament change commands inserted.
        """
        # *****************************************************************************************************
        # Get the parameters entered by the user
        # *****************************************************************************************************
        if __name__ == '__main__':
            UseModule = getSettingDataSimulator.ScriptSim
        else:
            UseModule = self

        layer_nums = UseModule.getSettingValueByKey("layer_number")
        initial_retract = UseModule.getSettingValueByKey("initial_retract")
        later_retract = UseModule.getSettingValueByKey("later_retract")
        x_pos = UseModule.getSettingValueByKey("x_position")
        y_pos = UseModule.getSettingValueByKey("y_position")

        color_change = "M600"

        if initial_retract is not None and initial_retract > 0.:
            color_change = color_change + (" E%.2f" % initial_retract)

        if later_retract is not None and later_retract > 0.:
            color_change = color_change + (" L%.2f" % later_retract)

        if x_pos is not None:
            color_change = color_change + (" X%.2f" % x_pos)

        if y_pos is not None:
            color_change = color_change + (" Y%.2f" % y_pos)

        color_change = color_change + " ; Generated by FilamentChange plugin\n"

        layer_targets = layer_nums.split(",")
        if len(layer_targets) > 0:
            for layer_num in layer_targets:
                try:
                    layer_num = int(layer_num.strip()) + 1 #Needs +1 because the 1st layer is reserved for start g-code.
                except ValueError: #Layer number is not an integer.
                    continue
                if 0 < layer_num < len(data):
                    data[layer_num] = color_change + data[layer_num]

        return data

# ********************************************************************************************************
# * This code only executes while debugging for now.
# * When called by Cura, the __name__ is not __main__, so this doesn't run
# ********************************************************************************************************
if __name__ == '__main__':
    from BuildLayerList import BuildLayerList

    # ********************************************************************************************************
    # * Put the input and output files here
    # * Generate and save a gcode file from Ultimaker Cura - Use that as the input file
    # * Give the after file a different name
    # ********************************************************************************************************
    FileIn = r"C:\Users\Public\Documents\Python\CuraPostProcessSimulator\CE3_20mm_calibration_cube_Before.gcode"
    FileOUt = r"C:\Users\Public\Documents\Python\CuraPostProcessSimulator\CE3_20mm_calibration_cube_After.gcode"

    # ********************************************************************************************************
    # * This uses the parameter settings list to enable user input
    # * The simulator is not as sophisticated as Ultimaker Cura, but it should be OK for testing
    # * It uses tkinter
    # ********************************************************************************************************
    FileNm = os.path.basename(__file__).split(".")[0]
    ppMod = eval(FileNm)()
    setting_data_as_string = ppMod.getSettingDataString()
    getSettingDataSimulator.ScriptSim.getPostProcessParameters(setting_data_as_string)

    # ********************************************************************************************************
    # * Parses a Gcode file into a list by layer to pass to the Cura post-processsor extension
    # * just like Ultimaker Cura passes the information
    # ********************************************************************************************************
    LayerList = BuildLayerList(FileIn)

    # ********************************************************************************************************
    # * Calls the execute method just like Ultimaker Cura does
    # * Test away my friend
    # ********************************************************************************************************
    # NewList1 = eval(FileNm).execute(FileNm,LayerList)  # CuraGcodeatLayer.execute
    NewList1 = ppMod.execute(LayerList)

    # ********************************************************************************************************
    # * Writes the results for your review
    # ********************************************************************************************************
    with open(FileOUt, "w") as File_Out:
        for line in NewList1:
            File_Out.write(line)
            File_Out.write("\n")

    # ********************************************************************************************************
    # * Writes a .bat file to copy this module to the cura script folder
    # * The first tile this runs, it can take a minute or two. After that, it will run sub-second
    # ********************************************************************************************************
    CuraLogPath = find_fq_path("Cura.log", 7, scope="Local")
    CuraScriptPath = os.path.dirname(CuraLogPath) + r"\scripts"
    script_path = os.path.realpath(__file__)
    xCopyBatPath = os.path.dirname(os.path.realpath(__file__)) + r"\CopyToCura.bat"
    xcopyCmd = "xcopy " + '"' + script_path + '"' + " " + '"' + CuraScriptPath + '" /y'
    # ********************************************************************************************************
    # * Writes the results for your review
    # ********************************************************************************************************
    with open(xCopyBatPath, "w") as Bat_Out:
        Bat_Out.write(xcopyCmd)
        Bat_Out.write("\npause")
        Bat_Out.write("\n")
